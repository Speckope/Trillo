///
// Logo
.logo {
  height: 3.25rem;
  margin-left: 2rem;
}

///
// Search
.search {
  flex: 0 0 40%;

  display: flex;
  align-items: center;
  justify-content: center;

  @media only screen and (max-width: $bp-smallest) {
    order: 1;
    flex: 0 0 100%;
    background-color: vat(--color-grey-light-2);
  }

  &__input {
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: 0.7rem 2rem;
    border-radius: 100px;
    width: 90%;
    transition: all 0.2s;
    // this way search button will move on top of the input
    margin-right: -3.25rem;

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    &::input-placeholder {
      font-weight: 100;
      color: var(--color-grey-light-3);
    }
  }

  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }

  &__button {
    border: none;
    background-color: var(--color-grey-light-2);

    // we give it no focus effect
    &:focus {
      outline: none;
    }

    // when clicked go above a litttle
    &:active {
      transform: translateY(2px);
    }
  }

  &__icon {
    height: 2rem;
    width: 2rem;
    fill: var(--color-grey-dark-3);
  }
}

///
// User navigation
.user-nav {
  // this will make it so this nav will take all of height
  align-self: stretch;

  display: flex;
  align-items: center;

  // we select all direct children of .user-nav
  & > * {
    padding: 0 2rem;
    cursor: pointer;
    // now it will take 100% of containers height
    height: 100%;
    // thats bc we want all of them to be flkexbox and center its content on cross axis
    display: flex;
    align-items: center;
  }

  // all direct children on hover
  & > *:hover {
    background-color: var(--color-grey-light-3);
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;
    fill: var(--color-grey-dark-3);
  }

  &__notification {
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    background-color: var(--color-primary);
    color: #fff;
    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    // here we center TEXT inside a SPAN!!!
    // Yes indeed! we can use flexbox for that as well!;
    // viva la flexbox!
    // 4 deadly levels of flexbox here
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user-photo {
    height: 3.75rem;
    border-radius: 50%;
    margin-right: 1rem;
  }
}

///
// Side navigation
.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  @media only screen and (max-width: $bp-medium) {
    display: flex;
    margin: 0;
  }

  &__item {
    position: relative;

    &:not(:last-child) {
      margin-bottom: 0.5rem;
      @media only screen and (max-width: $bp-medium) {
        margin: 0;
      }
    }

    @media only screen and (max-width: $bp-medium) {
      // we give this items ability to grow as much as they can
      flex: 1;
    }
  }

  &__item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    // with height 100% it will have exactly height of list item
    height: 100%;
    width: 3px;
    background-color: var(--color-primary);
    transform: scaleY(0);
    // so we set here transform time on .2s and then width with delay .2s and transition on width .4s
    transition: transform 0.2s,
      width 0.4s cubic-bezier(0.85, 0.01, 0.07, 0.97) 0.2s,
      background-color 0.1s;
  }

  &__item:hover::before,
  &__item--active::before {
    transform: scaleY(1);
    width: 90%;
  }

  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 3rem;
    // This is for link to be visible on animation!
    // Also z-index onyl works when we have specified position :o
    z-index: 10;
    position: relative;
    // this will also do that they will not get fckd up when we scale screen!!
    // marvelous
    display: flex;
    align-items: center;

    @media only screen and (max-width: $bp-medium) {
      justify-content: center;
      padding: 2rem;
    }

    @media only screen and (max-width: $bp-small) {
      flex-direction: column;
      padding: 1.5rem 0.5rem;
    }
  }
  &__icon {
    // icons in svg we usually size as squares
    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;
    // current color is color of parent element!!
    fill: currentColor;

    @media only screen and (max-width: $bp-small) {
      margin-right: 0;
      margin-bottom: 0.7rem;
      width: 1.5rem;
      height: 1.5rem;
    }
  }
}

///
// Legal
.legal {
  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  text-align: center;
  padding: 2.5rem;

  @media only screen and (max-width: $bp-medium) {
    display: none;
  }
}

///
// Galery
.gallery {
  display: flex;
  &__photo {
    // for responsive design we always define height and width so the image stays fluid
    width: 100%;
    // this is to avoid having small space underneath  an image which happens when we live it as an inline element
    // image should always be block or inline block if we dont want whitespace
    display: block;
  }
}

///
// Hotel overview
.overview {
  display: flex;
  align-items: center;
  border-bottom: 1px solid var(--color-grey-light-2);

  &__heading {
    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
      padding: 1.25rem 2rem;
    }
  }

  &__stars {
    // now it will grow and occupy all the avilable space
    //flex: 1;
    // with margin right:auto we will have same effect as with flex:1 but element
    // will occupy only space it needs to!!!
    margin-right: auto;
    display: flex;
  }

  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__location {
    font-size: 1, 2rem;
    display: flex;
    align-items: center;
  }

  &__icon-location {
    margin-right: 0.5rem;
  }

  &__rating {
    background-color: var(--color-primary);
    color: #fff;
    margin-left: 3rem;
    padding: 0 2.25rem;
    // now it will take all vertical avilable space
    align-self: stretch;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    @media only screen and (max-width: $bp-small) {
      padding: 0 1.5rem;
    }
  }

  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;
    margin-bottom: -3px;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
    }
  }

  &__rating-count {
    font-size: 0.8rem;
    text-transform: uppercase;

    @media only screen and (max-width: $bp-small) {
      font-size: 0.5rem;
    }
  }
}

///
// Button inline
.btn-inline {
  border: none;
  color: var(--color-primary);
  // with font-size: inherit it becomes little more modular!!
  font-size: inherit;
  // with currentColor border will have same color as text!!
  // Also border will automatically update when we change color text(hover in this exsample)!
  border-bottom: 1px solid currentColor;
  padding-bottom: 2px;
  display: inline-block;
  // this also helps it be more modular
  background-color: transparent;
  cursor: pointer;
  transition: all 0.2s;

  & span {
    margin-left: 3px;
    transition: margin-left 0.2s;
  }

  &:hover {
    color: var(--color-grey-dark-1);

    span {
      margin-left: 0.8rem;
    }
  }

  &:focus {
    outline: none;
    // infinite makes inifinte animation...
    animation: pulsate 1s infinite;
  }
}

// We make cusom INFINITE animation!!
@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    transform: scale(1.03);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25);
  }

  100% {
    transform: scale(1);
    box-shadow: none;
  }
}

////
// Paragraph
// last of type is the last of type...
.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}

////
// List
.list {
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: var(--line);
  border-bottom: var(--line);

  // Thius means that elements will wrap to a new line(new will start on new line)
  flex-wrap: wrap;
  display: flex;

  // now each of these list items will have 50% width!
  &__item {
    flex: 0 0 50%;
    margin-bottom: 0.7rem;
  }

  // before each of items we create sudo element and it will be our icon!!
  // This is the easiest way to include icon from css!
  &__item:before {
    content: '';
    display: inline-block;
    height: 1rem;
    width: 1rem;
    margin-right: 0.7rem;
    // older browsers approach
    background-image: url(../img/chevron-thin-right.svg);
    background-size: cover;

    @supports (-webkit-mask-image: url()) or (mask-image: url()) {
      //For newer browsers we use masks!
      // Its a bit like clipping. We set background-color, then
      // mask defines an area where we can see through that element and see whats behind that element
      background-color: var(--color-primary);
      mask-image: url(../img/chevron-thin-right.svg);
      // icon will cover entire element. like background-size
      mask-size: cover;
      background-image: none;

      // So we define vackground color and set icon as a mask
      // now we can see through that icon as a mask and see background-color: ;
    }
  }
}

////
// Recommend
.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);
  align-items: center;

  display: flex;

  &__count {
    // this automatically calculates margin so right element is pushed to the right side!!
    // And it makes nice space between the elements!
    margin-right: auto;
  }

  &__friends {
    display: flex;
  }

  &__photo {
    // we change box-sizing, bc we want border added to our specified height and width
    // otherwise it shrinks, bs border is added to size!!
    box-sizing: content-box;
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    // with border and overlap it will create nice visual!
    border: 3px solid #fff;

    &:not(:last-child) {
      // this way images will overlap each other! Cool!
      margin-right: -2rem;
    }
  }
}

////
// Reviews
.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;
  position: relative;
  overflow: hidden;

  @media only screen and (max-width: $bp-medium) {
    padding: 2rem;
    margin-bottom: 3rem;
  }

  &__text {
    margin-bottom: 2rem;
    z-index: 2;
    position: relative;
  }
  &__user {
    display: flex;
    align-items: center;
  }
  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem;
  }
  &__user-box {
    margin-right: auto;
  }
  &__user-name {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--color-grey-dark-2);
    text-transform: uppercase;
    margin-bottom: 0.4rem;
  }
  &__user-date {
    font-size: 1rem;
    color: var(--color-grey-dark-3);
  }
  &__user-rating {
    color: var(--color-primary);
    font-size: 2.2rem;
    font-weight: 300;
  }

  &::before {
    content: '\201C';
    position: absolute;
    top: -2.75rem;
    left: -1rem;
    line-height: 1;
    font-size: 20rem;
    color: var(--color-grey-light-2);
    font-family: sans-serif;
    z-index: 1;
  }
}

////
// Call to action

.cta {
  padding: 3.5rem 0;
  text-align: center;

  @media only screen and (max-width: $bp-medium) {
    padding: 2.5rem 0;
  }

  &__book-now {
    font-size: 2rem;
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem;
  }
}

////
// Btn
.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border: none;
  border-radius: 100px;
  color: white;
  background-image: linear-gradient(
    to right,
    var(--color-primary-light),
    var(--color-primary-dark)
  );
  position: relative;
  // now invisible element is outside the button so with this prop it will disapear when not hovered
  overflow: hidden;
  cursor: pointer;

  & > * {
    display: inline-block;
    height: 100%;
    width: 100%;
    transition: all 0.2s;
  }

  &__visible {
    padding: 2rem 7.5rem;
  }

  &__invisible {
    position: absolute;
    padding: 2rem 0;
    left: 0;
    top: -100%;
  }

  &:hover {
    // transition doesnt work for background-images!;
    // It still will change but wont be animated
    background-image: linear-gradient(
      to left,
      var(--color-primary-light),
      var(--color-primary-dark)
    );
  }

  &:hover &__visible {
    // 100% means 100% of its height
    transform: translateY(100%);
  }
  &:hover &__invisible {
    top: 0;
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}
